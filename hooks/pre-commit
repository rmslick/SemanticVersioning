#!/usr/bin/env python3
from subprocess import PIPE, run
import sys
def out(command):
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
    return (result.stdout).strip()



# acceptable branch types list
branchTypes = ["develop","master","release","feature","patch","private"]
devBranches = ["release","feature","patch","private"]
# obtain current branch name
currentBranchName = out("git rev-parse --abbrev-ref HEAD")
# Sync effort
#https://www.atlassian.com/git/tutorials/comparing-workflows
# change to remote on version.txt -> no push


# report hyphen error
if currentBranchName != "develop" and currentBranchName != "master" and currentBranchName.find('-') == -1:
    print("[ERROR] Branch name not follow naming conventions.\n[HINT] Non master/develop branches must include hyphen.\n[HINT] Must follow [branchtype]-[descriptivename] format")
    print("[ABORT] Aborting. Commit not created.")
    sys.exit(1)
# split at hyphen
currentBranchType = currentBranchName.split('-')[0]
if not currentBranchType in branchTypes:
    print("[ERROR] Branch name not follow naming conventions.\n[HINT] Non master/develop branches must include hyphen.\n[HINT] Must follow [branchtype]-[descriptivename] format")
    print("[ABORT] Aborting. Commit not created.")
    sys.exit(1)
currentBranchName = out("git rev-parse --abbrev-ref HEAD")
sys.stdin = open('/dev/tty')
if currentBranchName == "develop":
    update = input("Update version? (y/n)")
    if update == "y":
        vType = input("Version change (r,f,p):")
        versionFile = open("version.txt","r")
        version = versionFile.readlines()[0].strip()
        majMinFeat = version.split('.')
        if vType == "r":
            majMinFeat[0] = str(int(majMinFeat[0]) + 1)
            majMinFeat[1] = "0"
            majMinFeat[2] = "0"
            versionFile.write('.'.join(majMinFeat))
            versionFile.close()
        elif vType == "f":
            majMinFeat[1] = str(int(majMinFeat[1]) + 1)
            versionFile.write('.'.join(majMinFeat))
            versionFile.close()
        elif vType == "p":
            majMinFeat[2] = str(int(majMinFeat[2]) + 1)
            versionFile.write('.'.join(majMinFeat))
            versionFile.close()    
            majMinFeat[2] = str(int(majMinFeat[2]) + 1)
        else:
            print("[WARN] Invalid input, version not changed.")
            versionFile.close()
sys.exit(0)